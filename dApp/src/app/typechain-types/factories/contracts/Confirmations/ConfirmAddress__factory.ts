/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ConfirmAddress,
  ConfirmAddressInterface,
} from "../../../contracts/Confirmations/ConfirmAddress";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isContract",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608080604052346100155760c6908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c631627905514602857600080fd5b34608c576020366003190112608c576004356001600160a01b0381168103608857602092503f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708114159081607f575b5015158152f35b90501515386078565b8280fd5b5080fdfea26469706673582212203b4716df6018ce13005c6223388e8d1bc8dc697389b8d5ae5a9ffae614dc7de764736f6c63430008110033";

type ConfirmAddressConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConfirmAddressConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConfirmAddress__factory extends ContractFactory {
  constructor(...args: ConfirmAddressConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConfirmAddress> {
    return super.deploy(overrides || {}) as Promise<ConfirmAddress>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConfirmAddress {
    return super.attach(address) as ConfirmAddress;
  }
  override connect(signer: Signer): ConfirmAddress__factory {
    return super.connect(signer) as ConfirmAddress__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConfirmAddressInterface {
    return new utils.Interface(_abi) as ConfirmAddressInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConfirmAddress {
    return new Contract(address, _abi, signerOrProvider) as ConfirmAddress;
  }
}
