/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DexLockerFactory,
  DexLockerFactoryInterface,
} from "../../../contracts/Lockers/DexLockerFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dexLockerImplementationAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "coinVaultImplementationAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dexRouterAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "salesTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "purchaseTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "createDexLocker",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60803461008d57601f6102bc38819003918201601f19168301916001600160401b0383118484101761009257808492604094855283398101031261008d57610052602061004b836100a8565b92016100a8565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556040516101ff90816100bd8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361008d5756fe6080604090808252600436101561001557600080fd5b600091823560e01c63509f318c1461002c57600080fd5b346101c55760a03660031901126101c5576001600160a01b039160043583811691908290036101c157602435908482168092036101bd576044358581168091036101b957606435908682168092036101b55760843592878416809403610174578854733d602d80600a3d3981f3363d3d373d3d3d363d7360601b825260601b6bffffffffffffffffffffffff191660148201526e5af43d82803e903d91602b57fd5bf360881b602882015287906037908af016968715610178576001541693873b156101745786519563cc2a9a5b60e01b87526004870152602486015260448501526064840152608483015260a4820152838160c48183875af1801561016a5761013b575b6020838351908152f35b67ffffffffffffffff81116101565760209350815238610131565b634e487b7160e01b84526041600452602484fd5b82513d86823e3d90fd5b8880fd5b865162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606490fd5b8780fd5b8680fd5b8580fd5b8480fd5b8280fdfea26469706673582212203bb2c591b4e96d8012b77f9a236d401f7a3cd30d6d59b4a5abd723c63530f87364736f6c63430008110033";

type DexLockerFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DexLockerFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DexLockerFactory__factory extends ContractFactory {
  constructor(...args: DexLockerFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    dexLockerImplementationAddress: PromiseOrValue<string>,
    coinVaultImplementationAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DexLockerFactory> {
    return super.deploy(
      dexLockerImplementationAddress,
      coinVaultImplementationAddress,
      overrides || {}
    ) as Promise<DexLockerFactory>;
  }
  override getDeployTransaction(
    dexLockerImplementationAddress: PromiseOrValue<string>,
    coinVaultImplementationAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      dexLockerImplementationAddress,
      coinVaultImplementationAddress,
      overrides || {}
    );
  }
  override attach(address: string): DexLockerFactory {
    return super.attach(address) as DexLockerFactory;
  }
  override connect(signer: Signer): DexLockerFactory__factory {
    return super.connect(signer) as DexLockerFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexLockerFactoryInterface {
    return new utils.Interface(_abi) as DexLockerFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DexLockerFactory {
    return new Contract(address, _abi, signerOrProvider) as DexLockerFactory;
  }
}
