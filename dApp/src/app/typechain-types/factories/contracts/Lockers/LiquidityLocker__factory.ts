/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LiquidityLocker,
  LiquidityLockerInterface,
} from "../../../contracts/Lockers/LiquidityLocker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dexRouterAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "purchaseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "releaseTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidityPercentOfRaisedFunds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minRaisedFunds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxRaisedFunds",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getReleaseTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lpTokenPairAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxPurchaseTokenExpected",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxTokensExpected",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minPurchaseTokenExpected",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minTokensExpected",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "receivePurchaseTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "releaseLPTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "releasePurchaseTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "releaseSalesTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setCampaignSucceded",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604090808252346200025657610120816200171e80380380916200002682856200025b565b83398101031262000256576200003c8162000295565b906020916200004d83830162000295565b916200005b85820162000295565b936200006a6060830162000295565b9260808301519560a08401519560c08501519561010060e08701519601519742811115620001ec57600055600b80546001600160a01b039586166001600160a01b031991821681179092558b5163c45a015560e01b81529096918290829060049082905afa918215620001e15760009262000174575b5050936200014e938162000157989481620001639d9c999581620001429d9a1687600c541617600c55338760035416176003558d60015516856002541617600255168360085416176008551690600954161760095561271095869184620002aa565b048060065586620002aa565b600455620002aa565b049081600755620002aa565b600555516114499081620002d58239f35b81819392933d8311620001d9575b6200018e81836200025b565b81010312620001d65750936200014e938162000157989481620001639d9c999581620001bf620001429e9b62000295565b96505095999c9d50979a50949850819550620000e0565b80fd5b503d62000182565b8c513d6000823e3d90fd5b8a5162461bcd60e51b815260048101879052603460248201527f4c69717569646974794c6f636b65723a2072656c656173652074696d6520697360448201527f206265666f72652063757272656e742074696d650000000000000000000000006064820152608490fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200027f57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200025657565b81810292918115918404141715620002be57565b634e487b7160e01b600052601160045260246000fdfe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c9182631947492714610edc5750816353462d6b14610ebf578163893d20e814610e965781638ee7338014610e77578163a376b2dc14610d75578163a7b8648e14610d22578163a97007e314610bf5578163c5d3bfba14610bd3578163ccd7c06b14610bb4578163e21f2dcb14610a39578163e8078d941461010a57508063f42a386d146100e25763f81c4f67146100c15780610012565b346100de57816003193601126100de576020906007549051908152f35b5080fd5b50346100de57816003193601126100de57600a5490516001600160a01b039091168152602090f35b8383346100de57816003193601126100de576003546001600160a01b03919061013690831633146111b5565b60088281541680156109e757600954841680610588575050476001549361017061016a83610164818961121f565b9761121f565b86611248565b50600654821061053257825484516370a0823160e01b815230898201526020918316908281602481855afa90811561048057908a92918a916104f9575b506101bb9083541115611255565b83600c541684600b541691885185816315ab88c960e31b9687825281875afa9081156104d057828e88928f946104da575b508c5163e6a4390560e01b81526001600160a01b03928316918101918252939091166020820152829081906040010381865afa9081156104d057869188918e916104b3575b5016946bffffffffffffffffffffffff60a01b958087600a541617600a55156103cf575b5050505050508184541682600b5416865163095ea7b360e01b918282528b82015283816044818d600019978860248401525af180156103c55784928c926044926103a8575b508b878a541688600a5416968c519788968795865285015260248401525af1801561039e57610370575b505080600b5416925416916064420180421161035d5791849596979160c49360609651988996879563f305d71960e01b8752860152806024860152604485015282606485015230608485015260a48401525af19081156103545750610327575080f35b6103479060603d811161034d575b61033f8183610f55565b8101906112db565b50505080f35b503d610335565b513d84823e3d90fd5b634e487b7160e01b875260118852602487fd5b8161038f92903d10610397575b6103878183610f55565b810190610f8d565b5087806102c4565b503d61037d565b86513d8a823e3d90fd5b6103be90853d8711610397576103878183610f55565b508d61029a565b88513d8c823e3d90fd5b8d8b518096819382525afa9283156104a9579161042893918c8e8895829561048a575b508c516364e329cb60e11b81526001600160a01b0393841691810191825292909416602085015290948593849291839160400190565b03925af1908115610480579084918a91610453575b501690600a541617600a55888080808481610255565b6104739150843d8611610479575b61046b8183610f55565b8101906112bc565b8b61043d565b503d610461565b87513d8b823e3d90fd5b6104a2919550863d88116104795761046b8183610f55565b93386103f2565b89513d8d823e3d90fd5b6104ca9150833d85116104795761046b8183610f55565b8f610231565b8a513d8e823e3d90fd5b6104f2919450833d85116104795761046b8183610f55565b92386101ec565b80929350848092503d831161052b575b6105138183610f55565b8101031261052757518991906101bb6101ad565b8880fd5b503d610509565b835162461bcd60e51b8152602081890152602a60248201527f4c69717569646974794c6f636b65723a206e6f20657468657220746f20616464604482015269206c697175696469747960b01b6064820152608490fd5b83516370a0823160e01b80825230828a01526024989596959493909260209182848c81855afa9384156109ae578a946109b8575b508851948552308786015282858c81845afa9485156109ae578a9561097b575b506105fd6001546105f7866105f1818461121f565b9261121f565b90611248565b50600654841061091d5788906106168854871015611255565b600c54915163e6a4390560e01b81526001600160a01b03808316828b019081529085166020820152928a16928590829081906040010381865afa90811561083557938c938c938c88948d988891610900575b5016956bffffffffffffffffffffffff60a01b95600a9780888a541617895515610879575b5093925050508d92508a89541660448d8d600b54169051948593849263095ea7b360e01b9a8b855284015260001980988401525af18015610835578b60448f938f8e8e928b9661085c575b5087816009541691600b5416955197889687958d87528601528401525af18015610835578b60448f938f8e878f938f83918e9961083f575b505416918a5416955197889687958d87528601528401525af1801561083557938c86948f948c958f988f9096604497610818575b5080600954169354169851988997889687528601528401525af1801561080e576107f0575b50508480600b541693541694600954169160644201928342116107de579288999892610104959260609897958a519b8c998a9862e8e33760e81b8a52890152870152806044870152816064870152608486015260a48501523060c485015260e48401525af19081156103545750610327575080f35b634e487b7160e01b8952601186528989fd5b8161080692903d10610397576103878183610f55565b508880610769565b88513d8b823e3d90fd5b61082e908a3d8c11610397576103878183610f55565b5038610744565b8b513d8e823e3d90fd5b610855908a3d8c11610397576103878183610f55565b5038610710565b61087290873d8911610397576103878183610f55565b50386106d8565b516364e329cb60e11b81526001600160a01b03928316988101988952919093166020880152949593949384928391829060400103925af19081156108f657889392918a918d916108d9575b5016908254161781558b838180808e8e61068d565b6108f09150863d88116104795761046b8183610f55565b8e6108c4565b8a513d8d823e3d90fd5b6109179150863d88116104795761046b8183610f55565b38610668565b885162461bcd60e51b81528088018490526033818d01527f4c69717569646974794c6f636b65723a206e6f205075726368617365546f6b656044820152726e7320746f20616464206c697175696469747960681b6064820152608490fd5b9094508281813d83116109a7575b6109938183610f55565b810103126109a35751938b6105dc565b8980fd5b503d610989565b89513d8c823e3d90fd5b9093508281813d83116109e0575b6109d08183610f55565b810103126109a35751928b6105bc565b503d6109c6565b825162461bcd60e51b8152602081880152602660248201527f4c69717569646974794c6f636b65723a20546f6b656e2063616e206e6f74206260448201526565207a65726f60d01b6064820152608490fd5b8383346100de57816003193601126100de57610a5882544210156112f6565b6009546001600160a01b03908116801594908515610b465747915b8215610aed5750849560ff600c9695965460a01c16610ad9575b15610ac357505081808092600254164790828215610aba575bf115610ab0575080f35b51903d90823e3d90fd5b506108fc610aa6565b91909250610ad6935060025416906113c1565b80f35b610ae884600a5416151561135f565b610a8d565b608490602086519162461bcd60e51b8352820152602d60248201527f4c69717569646974794c6f636b65723a206e6f20507572636861736520746f6b60448201526c656e20746f2072656c6561736560981b6064820152fd5b83516370a0823160e01b81523083820152602081602481855afa908115610baa578691610b75575b5091610a73565b90506020813d8211610ba2575b81610b8f60209383610f55565b81010312610b9e575187610b6e565b8580fd5b3d9150610b82565b85513d88823e3d90fd5b5050346100de57816003193601126100de576020906006549051908152f35b905034610bf15782600319360112610bf15760209250549051908152f35b8280fd5b839150346100de57816003193601126100de57610c1582544210156112f6565b60ff600c5460a01c16610d06575b60085483516370a0823160e01b81523083820152916001600160a01b039182169190602084602481865afa938415610cfc578594610cc5575b508315610c745750610ad693945060025416906113c1565b608490602087519162461bcd60e51b8352820152602560248201527f4c69717569646974794c6f636b65723a206e6f20746f6b656e7320746f2072656044820152646c6561736560d81b6064820152fd5b9093506020813d8211610cf4575b81610ce060209383610f55565b81010312610cf057519286610c5c565b8480fd5b3d9150610cd3565b86513d87823e3d90fd5b600a54610d1d906001600160a01b0316151561135f565b610c23565b8390346100de5760203660031901126100de57358015158091036100de57610d5560018060a01b036003541633146111b5565b600c805460ff60a01b191660a09290921b60ff60a01b1691909117905580f35b839150346100de57816003193601126100de57610d9582544210156112f6565b600a546001600160a01b0390811690610daf82151561135f565b84516370a0823160e01b8152308482015292602084602481865afa938415610cfc578594610e44575b508315610df05750610ad693945060025416906113c1565b608490602087519162461bcd60e51b8352820152602860248201527f4c69717569646974794c6f636b65723a206e6f204c5020746f6b656e7320746f6044820152672072656c6561736560c01b6064820152fd5b9093506020813d8211610e6f575b81610e5f60209383610f55565b81010312610cf057519286610dd8565b3d9150610e52565b5050346100de57816003193601126100de576020906005549051908152f35b5050346100de57816003193601126100de5760025490516001600160a01b039091168152602090f35b5050346100de57816003193601126100de57602091549051908152f35b8490846020366003190112610bf1576009546323b872dd60e01b6020840152336024840152306044840152843560648085019190915283526001600160a01b03169060a083019067ffffffffffffffff821184831017610f4257610ad694955052610faa565b634e487b7160e01b855260418652602485fd5b90601f8019910116810190811067ffffffffffffffff821117610f7757604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610fa557518015158103610fa55790565b600080fd5b604080516001600160a01b03929092169290919067ffffffffffffffff82840181811184821017610f775784526020948584527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656486850152803b156110f65760008381949282898195519301915af1903d156110e7573d9081116110d357845161105294939291611044601f8201601f1916890183610f55565b81528092873d92013e61113a565b80519081611061575b50505050565b8380611071938301019101610f8d565b1561107d57808061105b565b60849250519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b634e487b7160e01b83526041600452602483fd5b5061105292915060609061113a565b845162461bcd60e51b815260048101879052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b90919015611146575090565b8151156111565750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851061119c575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350611179565b156111bc57565b60405162461bcd60e51b815260206004820152603560248201527f4c69717569646974794c6f636b65723a204f6e6c79206465706c6f796572206360448201527430b71031b0b636103a3434b990333ab731ba34b7b760591b6064820152608490fd5b8181029291811591840414171561123257565b634e487b7160e01b600052601160045260246000fd5b9190820391821161123257565b1561125c57565b60405162461bcd60e51b815260206004820152603260248201527f4c69717569646974794c6f636b65723a206e6f20746f6b656e2062616c616e636044820152716520746f20616464206c697175696469747960701b6064820152608490fd5b90816020910312610fa557516001600160a01b0381168103610fa55790565b90816060910312610fa5578051916040602083015192015190565b156112fd57565b60405162461bcd60e51b815260206004820152603460248201527f4c69717569646974794c6f636b65723a2063757272656e742074696d65206973604482015273206265666f72652072656c656173652074696d6560601b6064820152608490fd5b1561136657565b60405162461bcd60e51b815260206004820152602d60248201527f4c69717569646974794c6f636b65723a20416464204c6971756964697479206e60448201526c1bdd081e595d0818d85b1b1959609a1b6064820152608490fd5b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff831182841017610f775761141192604052610faa565b56fea2646970667358221220c5ca38edd0d8a2c098fe4f1726030a3df4fa88bdb887c0b577570112e657ab6f64736f6c63430008110033";

type LiquidityLockerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityLockerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityLocker__factory extends ContractFactory {
  constructor(...args: LiquidityLockerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    dexRouterAddress: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    purchaseToken: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    releaseTime: PromiseOrValue<BigNumberish>,
    liquidityPercentOfRaisedFunds: PromiseOrValue<BigNumberish>,
    minRaisedFunds: PromiseOrValue<BigNumberish>,
    maxRaisedFunds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LiquidityLocker> {
    return super.deploy(
      dexRouterAddress,
      token,
      purchaseToken,
      owner,
      price,
      releaseTime,
      liquidityPercentOfRaisedFunds,
      minRaisedFunds,
      maxRaisedFunds,
      overrides || {}
    ) as Promise<LiquidityLocker>;
  }
  override getDeployTransaction(
    dexRouterAddress: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    purchaseToken: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    releaseTime: PromiseOrValue<BigNumberish>,
    liquidityPercentOfRaisedFunds: PromiseOrValue<BigNumberish>,
    minRaisedFunds: PromiseOrValue<BigNumberish>,
    maxRaisedFunds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      dexRouterAddress,
      token,
      purchaseToken,
      owner,
      price,
      releaseTime,
      liquidityPercentOfRaisedFunds,
      minRaisedFunds,
      maxRaisedFunds,
      overrides || {}
    );
  }
  override attach(address: string): LiquidityLocker {
    return super.attach(address) as LiquidityLocker;
  }
  override connect(signer: Signer): LiquidityLocker__factory {
    return super.connect(signer) as LiquidityLocker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityLockerInterface {
    return new utils.Interface(_abi) as LiquidityLockerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityLocker {
    return new Contract(address, _abi, signerOrProvider) as LiquidityLocker;
  }
}
