/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PurchasedCoinVestingVault,
  PurchasedCoinVestingVaultInterface,
} from "../../../contracts/Lockers/PurchasedCoinVestingVault";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountClaimed",
        type: "uint256",
      },
    ],
    name: "GrantTokensClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "SECONDS_PER_DAY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_deployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "calculateGrantClaim",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimVestedCoins",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "grant",
    outputs: [
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vestingDuration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vestingCliff",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "daysClaimed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalClaimed",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vaultOwner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_vestingDurationInDays",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_vestingCliffInDays",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "coinOrTokenAddress",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "receiveTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokensVestedPerDay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608080604052346100c557600180556000549060ff8260081c16610073575060ff80821610610038575b604051610aa290816100cb8239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610029565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604081815260049081361015610022575b505050361561002057600080fd5b005b600092833560e01c90816330c3eaa8146106f6575080635df5f96f1461040e578063743e0c9b1461039457806374f0314f146103765780638da5cb5b1461034d5780639b3e28fd146101a2578063d310556b14610179578063d507ad191461014f578063e7b5fc17146101205763f2fde38b03610012573461011c57602036600319011261011c576100b261073f565b600254926001600160a01b039283851633036100e457505016906bffffffffffffffffffffffff60a01b161760025580f35b906020606492519162461bcd60e51b8352820152601260248201527113db9b1e4813dddb995c88105b1b1bddd95960721b6044820152fd5b8280fd5b83823461014b578160031936011261014b576020906101446006546007549061075a565b9051908152f35b5080fd5b5082346101765780600319360112610176575061016a6109e2565b82519182526020820152f35b80fd5b83823461014b578160031936011261014b5760035490516001600160a01b039091168152602090f35b503461011c578260031936011261011c5760026001541461030a57600260015560018060a01b03908160025416926101d86109e2565b939084156102d3576101ec90600954610a5f565b6009556101fb84600a54610a5f565b600a558154168061025057505083808080858782f115610247577fc6cbb4aa8681b18644bf64921eea8f2b9f44cbd58d64fc07a110bfccc2038296916020915b51908152a26001805580f35b513d84823e3d90fd5b82519163a9059cbb60e01b602084015285602484015284604484015260448352608083019083821067ffffffffffffffff8311176102c057507fc6cbb4aa8681b18644bf64921eea8f2b9f44cbd58d64fc07a110bfccc2038296949284926102bb926020965261077a565b61023b565b634e487b7160e01b885260419052602487fd5b835162461bcd60e51b815260208185015260116024820152700616d6f756e74566573746564206973203607c1b6044820152606490fd5b906020606492519162461bcd60e51b8352820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b83823461014b578160031936011261014b5760025490516001600160a01b039091168152602090f35b83823461014b578160031936011261014b5760209051620151808152f35b508290602036600319011261014b5760018060a01b038354168151916323b872dd60e01b6020840152336024840152306044840152843560648401526064835260a083019083821067ffffffffffffffff8311176103fb576103f89495505261077a565b80f35b634e487b7160e01b855260418652602485fd5b50903461011c5760c036600319011261011c5761042961073f565b6001600160a01b0391608435916064803592604480359391926024928335929060a4358a811691908290036106f2578c549a60ff8c60081c16159b8c809d6106e5575b80156106ce575b156106775760ff1981166001178f558e908d610665575b50506bffffffffffffffffffffffff60a01b913383600354161760035516816002541617600255865416178555610e428811610631576123a587116105fd578787106105cb576104da878761075a565b156105935750508061058d575042915b87519160c083019183831067ffffffffffffffff84111761057c575050889160a0918952838152846020820152858982015286606082015282608082015201526005556006556007556008558260095582600a55610546575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b634e487b7160e01b8b526041905289fd5b916104ea565b750616d6f756e74566573746564506572446179203e20360541b859160168660208e519562461bcd60e51b8752860152840152820152fd5b6f223ab930ba34b7b7101e1021b634b33360811b859160108660208e519562461bcd60e51b8752860152840152820152fd5b716d6f7265207468616e20323520796561727360701b859160128660208e519562461bcd60e51b8752860152840152820152fd5b716d6f7265207468616e20313020796561727360701b859160128660208e519562461bcd60e51b8752860152840152820152fd5b61ffff19166101011790558d3861048a565b8d5162461bcd60e51b81526020818b0152602e818a01527f496e697469616c697a61626c653a20636f6e747261637420697320616c726561818701526d191e481a5b9a5d1a585b1a5e995960921b81880152608490fd5b50303b1580156104735750600160ff821614610473565b50600160ff82161061046c565b8c80fd5b9250503461011c578260031936011261011c5760c0925060055490600654906007546008549160095493600a5495875260208701528501526060840152608083015260a0820152f35b600435906001600160a01b038216820361075557565b600080fd5b8115610764570490565b634e487b7160e01b600052601260045260246000fd5b604080516001600160a01b039290921692909167ffffffffffffffff8184018181118382101761092e5784526020948583527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656486840152803b156108ea5760008481959282898195519301915af13d156108dc573d8281116108c857855192601f8201601f19908116603f01168401908111848210176108b457865282526108299291903d858884013e610944565b805180610838575b5050505050565b8185918101031261014b5783015190811591821503610176575061085e57808080610831565b60849250519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b85526041600452602485fd5b610829929150606090610944565b845162461bcd60e51b815260048101879052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b90919015610950575090565b8151156109605750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106109a6575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350610983565b919082039182116109cc57565b634e487b7160e01b600052601160045260246000fd5b600554804210610a56576109fa6201518091426109bf565b04906008548210610a515760075491828110610a235750610a20600654600a54906109bf565b90565b610a33610a3c91600954906109bf565b9260065461075a565b918281029281840414811517156109cc579190565b600090565b50600090600090565b919082018092116109cc5756fea264697066735822122077e537f7814801395b9a5b6058fdb49dec4ff07dde5726d509765fd1f802740964736f6c63430008110033";

type PurchasedCoinVestingVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PurchasedCoinVestingVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PurchasedCoinVestingVault__factory extends ContractFactory {
  constructor(...args: PurchasedCoinVestingVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PurchasedCoinVestingVault> {
    return super.deploy(overrides || {}) as Promise<PurchasedCoinVestingVault>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PurchasedCoinVestingVault {
    return super.attach(address) as PurchasedCoinVestingVault;
  }
  override connect(signer: Signer): PurchasedCoinVestingVault__factory {
    return super.connect(signer) as PurchasedCoinVestingVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PurchasedCoinVestingVaultInterface {
    return new utils.Interface(_abi) as PurchasedCoinVestingVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PurchasedCoinVestingVault {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PurchasedCoinVestingVault;
  }
}
