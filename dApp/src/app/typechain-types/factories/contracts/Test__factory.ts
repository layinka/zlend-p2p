/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Test, TestInterface } from "../../contracts/Test";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "bytesToBytes32Array",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "decodeArray",
    outputs: [
      {
        internalType: "string[]",
        name: "result",
        type: "string[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "t",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60808060405234610016576106ec908161001c8239f35b600080fdfe6080604052600436101561001f575b610017366105f8565b602081519101f35b6000803560e01c9081634debc5781461005e5750806392d0d153146100555763e940d4620361000e57610050610396565b61000e565b5061005061022c565b346100f057602090816003193601126100f05760043567ffffffffffffffff81116100ec57366023820112156100ec576100ab6100a68492369060248160040135910161019c565b610576565b60405192828493840190808552835180925280604086019401925b8281106100d557505050500390f35b8351855286955093810193928101926001016100c6565b5080fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761012657604052565b61012e6100f3565b604052565b6020810190811067ffffffffffffffff82111761012657604052565b90601f8019910116810190811067ffffffffffffffff82111761012657604052565b60209067ffffffffffffffff811161018f575b601f01601f19160190565b6101976100f3565b610184565b9291926101a882610171565b916101b6604051938461014f565b8294818452818301116101d3578281602093846000960137010152565b600080fd5b919082519283825260005b848110610204575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016101e3565b9060206102299281815201906101d8565b90565b50346101d3576000806003193601126100f057604051908080549060019180831c9280821692831561032a575b60209283861085146103165785885260208801949081156102f5575060011461029d575b6102998761028d8189038261014f565b60405191829182610218565b0390f35b6000805294509192917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8386106102e4575050509101905061028d82610299388061027d565b8054858701529482019481016102c8565b60ff191685525050505090151560051b01905061028d82610299388061027d565b634e487b7160e01b82526022600452602482fd5b93607f1693610259565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106103685750505050505090565b9091929394958480610386600193603f198682030187528a516101d8565b9801930193019194939290610358565b50346101d35760203660031901126101d35767ffffffffffffffff6004358181116101d357366023820112156101d35780600401359182116101d35736602483830101116101d3576102999160246103ee92016104c4565b60405191829182610334565b50634e487b7160e01b600052601160045260246000fd5b60209067ffffffffffffffff811161042b575b60051b0190565b6104336100f3565b610424565b6001906000198114610448570190565b6104506103fa565b0190565b908160061b918083046040149015171561046a57565b6104726103fa565b565b906001820180921161046a57565b909392938483116101d35784116101d3578101920390565b80518210156104ae5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190918260061c906104d582610411565b906104e3604051928361014f565b828252601f196104f284610411565b0160005b818110610565575050819460005b848110610512575050505050565b8061054561053e61052561056094610454565b61053661053185610474565b610454565b908688610482565b369161019c565b61054f828761049a565b5261055a818661049a565b50610438565b610504565b8060606020809387010152016104f6565b805160051c9061058582610411565b91610593604051938461014f565b8083526105a2601f1991610411565b01916020923684830137829160005b815184116105f0576105d190848301516105cb828661049a565b52610438565b928481018091116105e3575b926105b1565b6105eb6103fa565b6105dd565b505091505090565b61060181610171565b61060e604051918261014f565b8181523682116101d357610632816000602085829683838198013783010152610576565b51604051906106408261010a565b60068252653230ba30989d60d11b6020830152610692604051809261067e6020830195632d839cb360e21b87526040602485015260648401906101d8565b90604483015203601f19810183528261014f565b51906a636f6e736f6c652e6c6f675afa506040516106af81610133565b600081529056fea264697066735822122001beb2c44c6acc0053be5db799006cc71cfff937caae16e23294cfab19ffa5b464736f6c63430008110033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
