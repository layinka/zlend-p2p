/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LibUtils,
  LibUtilsInterface,
} from "../../../contracts/libraries/LibUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "doubleHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "singleHash",
        type: "bytes",
      },
    ],
    name: "hashCheck",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "publicKey",
        type: "bytes",
      },
    ],
    name: "publicKeyLength",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001a576101e39081610020823930815050f35b600080fdfe608060405260048036101561001357600080fd5b600090813560e01c8063495fe007146100b45763a25bb3651461003557600080fd5b60403660031901126100b05760243567ffffffffffffffff81116100ac57610060903690830161012f565b60208151910120813503610072575080f35b60649060206040519162461bcd60e51b835282015260136024820152720d0c2e6d0cae640c8de40dcdee840dac2e8c6d606b1b6044820152fd5b8280fd5b5080fd5b5060203660031901126100b057803567ffffffffffffffff81116100ac576100e16040913690840161012f565b51036100eb575080f35b60649060206040519162461bcd60e51b8352820152601b60248201527f7075626c6963206b6579206d75737420626520363420627974657300000000006044820152fd5b81601f820112156101925780359067ffffffffffffffff928383116101975760405193601f8401601f19908116603f0116850190811185821017610197576040528284526020838301011161019257816000926020809301838601378301015290565b600080fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220960dded85cc6fe439cb604e98d317a60ebca243f719b2b076e66feb81d55b3b864736f6c63430008110033";

type LibUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibUtils__factory extends ContractFactory {
  constructor(...args: LibUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibUtils> {
    return super.deploy(overrides || {}) as Promise<LibUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibUtils {
    return super.attach(address) as LibUtils;
  }
  override connect(signer: Signer): LibUtils__factory {
    return super.connect(signer) as LibUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibUtilsInterface {
    return new utils.Interface(_abi) as LibUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibUtils {
    return new Contract(address, _abi, signerOrProvider) as LibUtils;
  }
}
