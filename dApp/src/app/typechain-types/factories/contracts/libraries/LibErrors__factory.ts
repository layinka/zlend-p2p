/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LibErrors,
  LibErrorsInterface,
} from "../../../contracts/libraries/LibErrors";

const _abi = [
  {
    inputs: [],
    name: "AccuseIncorrectProof",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "shardsProvided",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "minShards",
        type: "uint8",
      },
    ],
    name: "AccuseNotEnoughProof",
    type: "error",
  },
  {
    inputs: [],
    name: "ArweaveTxIdsInvalid",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "diggingFee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "archaeologist",
        type: "address",
      },
    ],
    name: "DiggingFeeTooLow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recoveredAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "expectedAddress",
        type: "address",
      },
    ],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxResurrectionIntervalIsZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "minShards",
        type: "uint8",
      },
    ],
    name: "MinShardsGreaterThanSignatorys",
    type: "error",
  },
  {
    inputs: [],
    name: "MinShardsZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newResurrectionTime",
        type: "uint256",
      },
    ],
    name: "NewResurrectionTimeInPast",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newResurrectionTime",
        type: "uint256",
      },
    ],
    name: "NewResurrectionTimeTooLarge",
    type: "error",
  },
  {
    inputs: [],
    name: "NoSignatoriesProvided",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cursedBond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NotEnoughCursedBond",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "freeBond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NotEnoughFreeBond",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NotEnoughReward",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "resurrectionTime",
        type: "uint256",
      },
    ],
    name: "ResurrectionTimeInPast",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "resurrectionTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sarcophagusMaximumRewrapInterval",
        type: "uint256",
      },
    ],
    name: "ResurrectionTimeTooFarInFuture",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "embalmer",
        type: "address",
      },
    ],
    name: "SenderNotEmbalmer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "archaeologist",
        type: "address",
      },
    ],
    name: "SignatoryAlreadyUnwrapped",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "archaeologists",
        type: "address[]",
      },
    ],
    name: "SignatoryListNotUnique",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "archaeologist",
        type: "address",
      },
    ],
    name: "SignatoryNotOnVault",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
      {
        internalType: "address",
        name: "archaeologist",
        type: "address",
      },
    ],
    name: "SignatoryProfileEnabledShouldBe",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sarcoId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "SignerNotSignatoryOnVault",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "resurrectionTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentTime",
        type: "uint256",
      },
    ],
    name: "TooEarlyToUnwrap",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "resurrectionTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gracePeriod",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentTime",
        type: "uint256",
      },
    ],
    name: "TooLateToUnwrap",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "unencryptedShard",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "doubleHashedShard",
        type: "bytes32",
      },
    ],
    name: "UnencryptedShardHashMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sarcoId",
        type: "bytes32",
      },
    ],
    name: "VaultAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sarcoId",
        type: "bytes32",
      },
    ],
    name: "VaultDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultIsUnwrappable",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultNotCleanable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "VaultParametersExpired",
    type: "error",
  },
];

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220d3f100ebbae49b36848090fc1b60ed070b2703867d966525b3b57a321bfc70b064736f6c63430008110033";

type LibErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibErrors__factory extends ContractFactory {
  constructor(...args: LibErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibErrors> {
    return super.deploy(overrides || {}) as Promise<LibErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibErrors {
    return super.attach(address) as LibErrors;
  }
  override connect(signer: Signer): LibErrors__factory {
    return super.connect(signer) as LibErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibErrorsInterface {
    return new utils.Interface(_abi) as LibErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibErrors {
    return new Contract(address, _abi, signerOrProvider) as LibErrors;
  }
}
